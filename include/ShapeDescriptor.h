#ifndef SHAPEDESCRIPTOR_H
#define SHAPEDESCRIPTOR_H

#include <opencv2/core.hpp>
#include <opencv2/imgproc.hpp>
#include <opencv2/highgui.hpp>

class ShapeDescriptor
{
public:

    // можно иициализировать экземпляр класс для обучения или для использования. булевый флаг true для обучния
    // флаг false для использования классификатора.
    // в конструкторе происходит считывание данных из файла базы, перерасчет контрольных значений происходит только при инициализации объекта класса, запись в память
    // используется 2 файла, для обучения, хранит все прошедшие через классификатор формы и помеченные как распознанные, для улучшения качества распознавания.
    // в фалйле для работы хранятся только контрольные значения классификатора, которые используются для распознавания обычным классификатором

    ShapeDescriptor(bool trainFlag = true, const std::string data_f_path = "data/fdata.xml", const std::string data_path = "data/data.xml");

    // в зависимости от флага деструктор работает по-разному. Если объект был создан для использования классификатора, то ничего не происходит.
    // Если для обучения, то в деструкторе происходит запись в файлы базы всех новых данных.

    ~ShapeDescriptor();

    // добавление новой фигуры - передается контур фигуры и ее новый индекс. Напишет ошибку если индекс уже существует. Если индекс новый - запишет в базу пару
    // контур-индекс, этот контур будет для этой фигуры как эталонный. После уже можно использовать классификатор. Однако для улучшения качетсва распознования
    // можно выполнить обучение с помощью trainClassify на других изображениях этой фигуры. До обучения контрольные значения классификатора
    // для данной фигуры равны контуру переданному в addShape для этого индекса
    void addShape(const std::vector<cv::Point> &addContour, int label);

    // обычный классификатор для использования, использует для распознования только контрольные обученные данные из второго файла
    // возвращает индекс наиболее подходящей фигуры и печатает меру расстояния до нее. возвращает -1 если фигура не похожа ни на один образец
    // возвращает -100 при попытке вызвать функцию если объект инициализирован для обучения. тогда надо использовать trainClassify
    int classify(const std::vector<cv::Point> &src);

    // классификатор для обучения. Запоминает каждый проверенную и распознанную фигуру в файл базы даных, для дальнейшего улучшения качества
    // стоит использовать только для обучения. Работает только для фигур добавленных через addShape
    int trainClassify(const std::vector<cv::Point> &src);

private:
    bool trainFlag; // флаг обучения. true - обучение, false - для работы

    const std::string path;  // путь к XML с данными для обучения
    const std::string fpath;  // путь к XML с контрольными значениями для работы

    // служебные поля
    cv::FileStorage fs; //
    cv::FileStorage fsFinal; //

    std::vector<cv::Mat> mat; // вектор всех матриц обучения в памяти
    std::vector<int> idx; // вектор всех идентификаторов фигур матриц дя обучения. Тоже кол-во элементов что у mat

    // тоже что и выше, но вектора контрольных значений. Рассчитываются при инициализации на основе имеющихся данных, сохраняются в файл при уничтожении объекта
    std::vector<cv::Mat> avgDesc;
    std::vector<int> u_idx;
};

#endif
